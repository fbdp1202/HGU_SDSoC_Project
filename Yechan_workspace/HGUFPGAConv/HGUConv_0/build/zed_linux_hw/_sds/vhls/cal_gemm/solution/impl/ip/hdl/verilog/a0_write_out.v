// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module a0_write_out (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        lout_0_address0,
        lout_0_ce0,
        lout_0_q0,
        lout_1_address0,
        lout_1_ce0,
        lout_1_q0,
        lout_2_address0,
        lout_2_ce0,
        lout_2_q0,
        lout_3_address0,
        lout_3_ce0,
        lout_3_q0,
        lout_4_address0,
        lout_4_ce0,
        lout_4_q0,
        lout_5_address0,
        lout_5_ce0,
        lout_5_q0,
        lout_6_address0,
        lout_6_ce0,
        lout_6_q0,
        lout_7_address0,
        lout_7_ce0,
        lout_7_q0,
        lout_8_address0,
        lout_8_ce0,
        lout_8_q0,
        lout_9_address0,
        lout_9_ce0,
        lout_9_q0,
        lout_10_address0,
        lout_10_ce0,
        lout_10_q0,
        lout_11_address0,
        lout_11_ce0,
        lout_11_q0,
        lout_12_address0,
        lout_12_ce0,
        lout_12_q0,
        lout_13_address0,
        lout_13_ce0,
        lout_13_q0,
        lout_14_address0,
        lout_14_ce0,
        lout_14_q0,
        lout_15_address0,
        lout_15_ce0,
        lout_15_q0,
        lout_16_address0,
        lout_16_ce0,
        lout_16_q0,
        lout_17_address0,
        lout_17_ce0,
        lout_17_q0,
        lout_18_address0,
        lout_18_ce0,
        lout_18_q0,
        lout_19_address0,
        lout_19_ce0,
        lout_19_q0,
        lout_20_address0,
        lout_20_ce0,
        lout_20_q0,
        lout_21_address0,
        lout_21_ce0,
        lout_21_q0,
        lout_22_address0,
        lout_22_ce0,
        lout_22_q0,
        lout_23_address0,
        lout_23_ce0,
        lout_23_q0,
        lout_24_address0,
        lout_24_ce0,
        lout_24_q0,
        lout_25_address0,
        lout_25_ce0,
        lout_25_q0,
        lout_26_address0,
        lout_26_ce0,
        lout_26_q0,
        lout_27_address0,
        lout_27_ce0,
        lout_27_q0,
        lout_28_address0,
        lout_28_ce0,
        lout_28_q0,
        lout_29_address0,
        lout_29_ce0,
        lout_29_q0,
        lout_30_address0,
        lout_30_ce0,
        lout_30_q0,
        lout_31_address0,
        lout_31_ce0,
        lout_31_q0,
        C_din,
        C_full_n,
        C_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] lout_0_address0;
output   lout_0_ce0;
input  [31:0] lout_0_q0;
output  [7:0] lout_1_address0;
output   lout_1_ce0;
input  [31:0] lout_1_q0;
output  [7:0] lout_2_address0;
output   lout_2_ce0;
input  [31:0] lout_2_q0;
output  [7:0] lout_3_address0;
output   lout_3_ce0;
input  [31:0] lout_3_q0;
output  [7:0] lout_4_address0;
output   lout_4_ce0;
input  [31:0] lout_4_q0;
output  [7:0] lout_5_address0;
output   lout_5_ce0;
input  [31:0] lout_5_q0;
output  [7:0] lout_6_address0;
output   lout_6_ce0;
input  [31:0] lout_6_q0;
output  [7:0] lout_7_address0;
output   lout_7_ce0;
input  [31:0] lout_7_q0;
output  [7:0] lout_8_address0;
output   lout_8_ce0;
input  [31:0] lout_8_q0;
output  [7:0] lout_9_address0;
output   lout_9_ce0;
input  [31:0] lout_9_q0;
output  [7:0] lout_10_address0;
output   lout_10_ce0;
input  [31:0] lout_10_q0;
output  [7:0] lout_11_address0;
output   lout_11_ce0;
input  [31:0] lout_11_q0;
output  [7:0] lout_12_address0;
output   lout_12_ce0;
input  [31:0] lout_12_q0;
output  [7:0] lout_13_address0;
output   lout_13_ce0;
input  [31:0] lout_13_q0;
output  [7:0] lout_14_address0;
output   lout_14_ce0;
input  [31:0] lout_14_q0;
output  [7:0] lout_15_address0;
output   lout_15_ce0;
input  [31:0] lout_15_q0;
output  [7:0] lout_16_address0;
output   lout_16_ce0;
input  [31:0] lout_16_q0;
output  [7:0] lout_17_address0;
output   lout_17_ce0;
input  [31:0] lout_17_q0;
output  [7:0] lout_18_address0;
output   lout_18_ce0;
input  [31:0] lout_18_q0;
output  [7:0] lout_19_address0;
output   lout_19_ce0;
input  [31:0] lout_19_q0;
output  [7:0] lout_20_address0;
output   lout_20_ce0;
input  [31:0] lout_20_q0;
output  [7:0] lout_21_address0;
output   lout_21_ce0;
input  [31:0] lout_21_q0;
output  [7:0] lout_22_address0;
output   lout_22_ce0;
input  [31:0] lout_22_q0;
output  [7:0] lout_23_address0;
output   lout_23_ce0;
input  [31:0] lout_23_q0;
output  [7:0] lout_24_address0;
output   lout_24_ce0;
input  [31:0] lout_24_q0;
output  [7:0] lout_25_address0;
output   lout_25_ce0;
input  [31:0] lout_25_q0;
output  [7:0] lout_26_address0;
output   lout_26_ce0;
input  [31:0] lout_26_q0;
output  [7:0] lout_27_address0;
output   lout_27_ce0;
input  [31:0] lout_27_q0;
output  [7:0] lout_28_address0;
output   lout_28_ce0;
input  [31:0] lout_28_q0;
output  [7:0] lout_29_address0;
output   lout_29_ce0;
input  [31:0] lout_29_q0;
output  [7:0] lout_30_address0;
output   lout_30_ce0;
input  [31:0] lout_30_q0;
output  [7:0] lout_31_address0;
output   lout_31_ce0;
input  [31:0] lout_31_q0;
output  [31:0] C_din;
input   C_full_n;
output   C_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg lout_0_ce0;
reg lout_1_ce0;
reg lout_2_ce0;
reg lout_3_ce0;
reg lout_4_ce0;
reg lout_5_ce0;
reg lout_6_ce0;
reg lout_7_ce0;
reg lout_8_ce0;
reg lout_9_ce0;
reg lout_10_ce0;
reg lout_11_ce0;
reg lout_12_ce0;
reg lout_13_ce0;
reg lout_14_ce0;
reg lout_15_ce0;
reg lout_16_ce0;
reg lout_17_ce0;
reg lout_18_ce0;
reg lout_19_ce0;
reg lout_20_ce0;
reg lout_21_ce0;
reg lout_22_ce0;
reg lout_23_ce0;
reg lout_24_ce0;
reg lout_25_ce0;
reg lout_26_ce0;
reg lout_27_ce0;
reg lout_28_ce0;
reg lout_29_ce0;
reg lout_30_ce0;
reg lout_31_ce0;
reg C_write;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    C_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_792;
reg   [0:0] exitcond_flatten_reg_792_pp0_iter1_reg;
reg   [12:0] indvar_flatten_reg_529;
reg   [12:0] indvars_iv_reg_540;
reg   [5:0] w_reg_551;
reg   [12:0] z_reg_562;
reg   [12:0] z_1_reg_573;
reg   [7:0] i_reg_584;
wire   [0:0] exitcond_flatten_fu_595_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [12:0] indvar_flatten_next_fu_601_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] w_t_mid2_v_fu_641_p3;
reg   [5:0] w_t_mid2_v_reg_801;
wire   [4:0] tmp_3_fu_649_p1;
reg   [4:0] tmp_3_reg_806;
wire   [12:0] indvars_iv_mid2_fu_659_p3;
wire   [12:0] z_mid2_fu_667_p3;
wire   [7:0] i_1_fu_711_p2;
wire   [12:0] tmp_fu_717_p2;
wire   [31:0] tmp_2_fu_723_p34;
reg   [31:0] tmp_2_reg_991;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg   [5:0] ap_phi_mux_w_phi_fu_555_p4;
wire   [31:0] i_cast_fu_675_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] exitcond_fu_607_p2;
wire   [12:0] z_s_fu_613_p2;
wire   [5:0] w_s_fu_635_p2;
wire   [12:0] indvars_iv_next_dup_fu_653_p2;
wire   [7:0] i_mid2_fu_627_p3;
wire   [12:0] z_1_mid2_fu_619_p3;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

a0_cal_gemm_mux_325_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
cal_gemm_mux_325_dEe_U395(
    .din0(lout_0_q0),
    .din1(lout_1_q0),
    .din2(lout_2_q0),
    .din3(lout_3_q0),
    .din4(lout_4_q0),
    .din5(lout_5_q0),
    .din6(lout_6_q0),
    .din7(lout_7_q0),
    .din8(lout_8_q0),
    .din9(lout_9_q0),
    .din10(lout_10_q0),
    .din11(lout_11_q0),
    .din12(lout_12_q0),
    .din13(lout_13_q0),
    .din14(lout_14_q0),
    .din15(lout_15_q0),
    .din16(lout_16_q0),
    .din17(lout_17_q0),
    .din18(lout_18_q0),
    .din19(lout_19_q0),
    .din20(lout_20_q0),
    .din21(lout_21_q0),
    .din22(lout_22_q0),
    .din23(lout_23_q0),
    .din24(lout_24_q0),
    .din25(lout_25_q0),
    .din26(lout_26_q0),
    .din27(lout_27_q0),
    .din28(lout_28_q0),
    .din29(lout_29_q0),
    .din30(lout_30_q0),
    .din31(lout_31_q0),
    .din32(tmp_3_reg_806),
    .dout(tmp_2_fu_723_p34)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_595_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_584 <= i_1_fu_711_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_584 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_595_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_529 <= indvar_flatten_next_fu_601_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_529 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_595_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvars_iv_reg_540 <= indvars_iv_mid2_fu_659_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvars_iv_reg_540 <= 13'd169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_792 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_reg_551 <= w_t_mid2_v_reg_801;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w_reg_551 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_595_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_1_reg_573 <= tmp_fu_717_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        z_1_reg_573 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_595_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_reg_562 <= z_mid2_fu_667_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        z_reg_562 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_792 <= exitcond_flatten_fu_595_p2;
        exitcond_flatten_reg_792_pp0_iter1_reg <= exitcond_flatten_reg_792;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_792 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_2_reg_991 <= tmp_2_fu_723_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_595_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_3_reg_806 <= tmp_3_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_595_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_t_mid2_v_reg_801 <= w_t_mid2_v_fu_641_p3;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_792_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        C_blk_n = C_full_n;
    end else begin
        C_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_792_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        C_write = 1'b1;
    end else begin
        C_write = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_595_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_792 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_w_phi_fu_555_p4 = w_t_mid2_v_reg_801;
    end else begin
        ap_phi_mux_w_phi_fu_555_p4 = w_reg_551;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_0_ce0 = 1'b1;
    end else begin
        lout_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_10_ce0 = 1'b1;
    end else begin
        lout_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_11_ce0 = 1'b1;
    end else begin
        lout_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_12_ce0 = 1'b1;
    end else begin
        lout_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_13_ce0 = 1'b1;
    end else begin
        lout_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_14_ce0 = 1'b1;
    end else begin
        lout_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_15_ce0 = 1'b1;
    end else begin
        lout_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_16_ce0 = 1'b1;
    end else begin
        lout_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_17_ce0 = 1'b1;
    end else begin
        lout_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_18_ce0 = 1'b1;
    end else begin
        lout_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_19_ce0 = 1'b1;
    end else begin
        lout_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_1_ce0 = 1'b1;
    end else begin
        lout_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_20_ce0 = 1'b1;
    end else begin
        lout_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_21_ce0 = 1'b1;
    end else begin
        lout_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_22_ce0 = 1'b1;
    end else begin
        lout_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_23_ce0 = 1'b1;
    end else begin
        lout_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_24_ce0 = 1'b1;
    end else begin
        lout_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_25_ce0 = 1'b1;
    end else begin
        lout_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_26_ce0 = 1'b1;
    end else begin
        lout_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_27_ce0 = 1'b1;
    end else begin
        lout_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_28_ce0 = 1'b1;
    end else begin
        lout_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_29_ce0 = 1'b1;
    end else begin
        lout_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_2_ce0 = 1'b1;
    end else begin
        lout_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_30_ce0 = 1'b1;
    end else begin
        lout_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_31_ce0 = 1'b1;
    end else begin
        lout_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_3_ce0 = 1'b1;
    end else begin
        lout_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_4_ce0 = 1'b1;
    end else begin
        lout_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_5_ce0 = 1'b1;
    end else begin
        lout_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_6_ce0 = 1'b1;
    end else begin
        lout_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_7_ce0 = 1'b1;
    end else begin
        lout_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_8_ce0 = 1'b1;
    end else begin
        lout_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lout_9_ce0 = 1'b1;
    end else begin
        lout_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_595_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_595_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_din = tmp_2_reg_991;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == C_full_n) & (exitcond_flatten_reg_792_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == C_full_n) & (exitcond_flatten_reg_792_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == C_full_n) & (exitcond_flatten_reg_792_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((1'b0 == C_full_n) & (exitcond_flatten_reg_792_pp0_iter1_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten_fu_595_p2 = ((indvar_flatten_reg_529 == 13'd5408) ? 1'b1 : 1'b0);

assign exitcond_fu_607_p2 = ((z_1_reg_573 == indvars_iv_reg_540) ? 1'b1 : 1'b0);

assign i_1_fu_711_p2 = (8'd1 + i_mid2_fu_627_p3);

assign i_cast_fu_675_p1 = i_mid2_fu_627_p3;

assign i_mid2_fu_627_p3 = ((exitcond_fu_607_p2[0:0] === 1'b1) ? 8'd0 : i_reg_584);

assign indvar_flatten_next_fu_601_p2 = (indvar_flatten_reg_529 + 13'd1);

assign indvars_iv_mid2_fu_659_p3 = ((exitcond_fu_607_p2[0:0] === 1'b1) ? indvars_iv_next_dup_fu_653_p2 : indvars_iv_reg_540);

assign indvars_iv_next_dup_fu_653_p2 = (13'd169 + indvars_iv_reg_540);

assign lout_0_address0 = i_cast_fu_675_p1;

assign lout_10_address0 = i_cast_fu_675_p1;

assign lout_11_address0 = i_cast_fu_675_p1;

assign lout_12_address0 = i_cast_fu_675_p1;

assign lout_13_address0 = i_cast_fu_675_p1;

assign lout_14_address0 = i_cast_fu_675_p1;

assign lout_15_address0 = i_cast_fu_675_p1;

assign lout_16_address0 = i_cast_fu_675_p1;

assign lout_17_address0 = i_cast_fu_675_p1;

assign lout_18_address0 = i_cast_fu_675_p1;

assign lout_19_address0 = i_cast_fu_675_p1;

assign lout_1_address0 = i_cast_fu_675_p1;

assign lout_20_address0 = i_cast_fu_675_p1;

assign lout_21_address0 = i_cast_fu_675_p1;

assign lout_22_address0 = i_cast_fu_675_p1;

assign lout_23_address0 = i_cast_fu_675_p1;

assign lout_24_address0 = i_cast_fu_675_p1;

assign lout_25_address0 = i_cast_fu_675_p1;

assign lout_26_address0 = i_cast_fu_675_p1;

assign lout_27_address0 = i_cast_fu_675_p1;

assign lout_28_address0 = i_cast_fu_675_p1;

assign lout_29_address0 = i_cast_fu_675_p1;

assign lout_2_address0 = i_cast_fu_675_p1;

assign lout_30_address0 = i_cast_fu_675_p1;

assign lout_31_address0 = i_cast_fu_675_p1;

assign lout_3_address0 = i_cast_fu_675_p1;

assign lout_4_address0 = i_cast_fu_675_p1;

assign lout_5_address0 = i_cast_fu_675_p1;

assign lout_6_address0 = i_cast_fu_675_p1;

assign lout_7_address0 = i_cast_fu_675_p1;

assign lout_8_address0 = i_cast_fu_675_p1;

assign lout_9_address0 = i_cast_fu_675_p1;

assign tmp_3_fu_649_p1 = w_t_mid2_v_fu_641_p3[4:0];

assign tmp_fu_717_p2 = (13'd1 + z_1_mid2_fu_619_p3);

assign w_s_fu_635_p2 = (6'd1 + ap_phi_mux_w_phi_fu_555_p4);

assign w_t_mid2_v_fu_641_p3 = ((exitcond_fu_607_p2[0:0] === 1'b1) ? w_s_fu_635_p2 : ap_phi_mux_w_phi_fu_555_p4);

assign z_1_mid2_fu_619_p3 = ((exitcond_fu_607_p2[0:0] === 1'b1) ? z_s_fu_613_p2 : z_1_reg_573);

assign z_mid2_fu_667_p3 = ((exitcond_fu_607_p2[0:0] === 1'b1) ? z_s_fu_613_p2 : z_reg_562);

assign z_s_fu_613_p2 = (13'd169 + z_reg_562);

endmodule //a0_write_out
