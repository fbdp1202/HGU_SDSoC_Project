-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_write_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    lout_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_0_ce0 : OUT STD_LOGIC;
    lout_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_1_ce0 : OUT STD_LOGIC;
    lout_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_2_ce0 : OUT STD_LOGIC;
    lout_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_3_ce0 : OUT STD_LOGIC;
    lout_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_4_ce0 : OUT STD_LOGIC;
    lout_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_5_ce0 : OUT STD_LOGIC;
    lout_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_6_ce0 : OUT STD_LOGIC;
    lout_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_7_ce0 : OUT STD_LOGIC;
    lout_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_8_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_8_ce0 : OUT STD_LOGIC;
    lout_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_9_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_9_ce0 : OUT STD_LOGIC;
    lout_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_10_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_10_ce0 : OUT STD_LOGIC;
    lout_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_11_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_11_ce0 : OUT STD_LOGIC;
    lout_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_12_ce0 : OUT STD_LOGIC;
    lout_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_13_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_13_ce0 : OUT STD_LOGIC;
    lout_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_14_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_14_ce0 : OUT STD_LOGIC;
    lout_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_15_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_15_ce0 : OUT STD_LOGIC;
    lout_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_16_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_16_ce0 : OUT STD_LOGIC;
    lout_16_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_17_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_17_ce0 : OUT STD_LOGIC;
    lout_17_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_18_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_18_ce0 : OUT STD_LOGIC;
    lout_18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_19_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_19_ce0 : OUT STD_LOGIC;
    lout_19_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_20_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_20_ce0 : OUT STD_LOGIC;
    lout_20_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_21_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_21_ce0 : OUT STD_LOGIC;
    lout_21_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_22_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_22_ce0 : OUT STD_LOGIC;
    lout_22_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_23_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_23_ce0 : OUT STD_LOGIC;
    lout_23_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_24_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_24_ce0 : OUT STD_LOGIC;
    lout_24_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_25_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_25_ce0 : OUT STD_LOGIC;
    lout_25_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_26_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_26_ce0 : OUT STD_LOGIC;
    lout_26_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_27_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_27_ce0 : OUT STD_LOGIC;
    lout_27_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_28_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_28_ce0 : OUT STD_LOGIC;
    lout_28_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_29_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_29_ce0 : OUT STD_LOGIC;
    lout_29_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_30_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_30_ce0 : OUT STD_LOGIC;
    lout_30_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lout_31_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lout_31_ce0 : OUT STD_LOGIC;
    lout_31_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_full_n : IN STD_LOGIC;
    C_write : OUT STD_LOGIC );
end;


architecture behav of a0_write_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_A9 : STD_LOGIC_VECTOR (12 downto 0) := "0000010101001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv13_1520 : STD_LOGIC_VECTOR (12 downto 0) := "1010100100000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal C_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_792 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_792_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_529 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvars_iv_reg_540 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_reg_551 : STD_LOGIC_VECTOR (5 downto 0);
    signal z_reg_562 : STD_LOGIC_VECTOR (12 downto 0);
    signal z_1_reg_573 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_reg_584 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_flatten_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_601_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal w_t_mid2_v_fu_641_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_t_mid2_v_reg_801 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_649_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_reg_806 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_mid2_fu_659_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal z_mid2_fu_667_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_fu_711_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_717_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_fu_723_p34 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_991 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_w_phi_fu_555_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast_fu_675_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal exitcond_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_s_fu_613_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_s_fu_635_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvars_iv_next_dup_fu_653_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_mid2_fu_627_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_1_mid2_fu_619_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component a0_cal_gemm_mux_325_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    cal_gemm_mux_325_dEe_U395 : component a0_cal_gemm_mux_325_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din0 => lout_0_q0,
        din1 => lout_1_q0,
        din2 => lout_2_q0,
        din3 => lout_3_q0,
        din4 => lout_4_q0,
        din5 => lout_5_q0,
        din6 => lout_6_q0,
        din7 => lout_7_q0,
        din8 => lout_8_q0,
        din9 => lout_9_q0,
        din10 => lout_10_q0,
        din11 => lout_11_q0,
        din12 => lout_12_q0,
        din13 => lout_13_q0,
        din14 => lout_14_q0,
        din15 => lout_15_q0,
        din16 => lout_16_q0,
        din17 => lout_17_q0,
        din18 => lout_18_q0,
        din19 => lout_19_q0,
        din20 => lout_20_q0,
        din21 => lout_21_q0,
        din22 => lout_22_q0,
        din23 => lout_23_q0,
        din24 => lout_24_q0,
        din25 => lout_25_q0,
        din26 => lout_26_q0,
        din27 => lout_27_q0,
        din28 => lout_28_q0,
        din29 => lout_29_q0,
        din30 => lout_30_q0,
        din31 => lout_31_q0,
        din32 => tmp_3_reg_806,
        dout => tmp_2_fu_723_p34);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_584_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_595_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_584 <= i_1_fu_711_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_584 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_529_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_595_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_529 <= indvar_flatten_next_fu_601_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_529 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvars_iv_reg_540_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_595_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvars_iv_reg_540 <= indvars_iv_mid2_fu_659_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvars_iv_reg_540 <= ap_const_lv13_A9;
            end if; 
        end if;
    end process;

    w_reg_551_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_792 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                w_reg_551 <= w_t_mid2_v_reg_801;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w_reg_551 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    z_1_reg_573_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_595_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                z_1_reg_573 <= tmp_fu_717_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                z_1_reg_573 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    z_reg_562_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_595_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                z_reg_562 <= z_mid2_fu_667_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                z_reg_562 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_792 <= exitcond_flatten_fu_595_p2;
                exitcond_flatten_reg_792_pp0_iter1_reg <= exitcond_flatten_reg_792;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_792 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_2_reg_991 <= tmp_2_fu_723_p34;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_595_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_3_reg_806 <= tmp_3_fu_649_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_595_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                w_t_mid2_v_reg_801 <= w_t_mid2_v_fu_641_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter2, exitcond_flatten_fu_595_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten_fu_595_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten_fu_595_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    C_blk_n_assign_proc : process(C_full_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, exitcond_flatten_reg_792_pp0_iter1_reg)
    begin
        if (((exitcond_flatten_reg_792_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_blk_n <= C_full_n;
        else 
            C_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    C_din <= tmp_2_reg_991;

    C_write_assign_proc : process(ap_enable_reg_pp0_iter2, exitcond_flatten_reg_792_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_792_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_write <= ap_const_logic_1;
        else 
            C_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(C_full_n, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_792_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_logic_0 = C_full_n) and (exitcond_flatten_reg_792_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(C_full_n, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_792_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = C_full_n) and (exitcond_flatten_reg_792_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(C_full_n, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_792_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = C_full_n) and (exitcond_flatten_reg_792_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter2_assign_proc : process(C_full_n, exitcond_flatten_reg_792_pp0_iter1_reg)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((ap_const_logic_0 = C_full_n) and (exitcond_flatten_reg_792_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_595_p2)
    begin
        if ((exitcond_flatten_fu_595_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_w_phi_fu_555_p4_assign_proc : process(ap_block_pp0_stage0, exitcond_flatten_reg_792, w_reg_551, ap_CS_fsm_pp0_stage0, w_t_mid2_v_reg_801, ap_enable_reg_pp0_iter1)
    begin
        if (((exitcond_flatten_reg_792 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_w_phi_fu_555_p4 <= w_t_mid2_v_reg_801;
        else 
            ap_phi_mux_w_phi_fu_555_p4 <= w_reg_551;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_595_p2 <= "1" when (indvar_flatten_reg_529 = ap_const_lv13_1520) else "0";
    exitcond_fu_607_p2 <= "1" when (z_1_reg_573 = indvars_iv_reg_540) else "0";
    i_1_fu_711_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(i_mid2_fu_627_p3));
    i_cast_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_mid2_fu_627_p3),32));
    i_mid2_fu_627_p3 <= 
        ap_const_lv8_0 when (exitcond_fu_607_p2(0) = '1') else 
        i_reg_584;
    indvar_flatten_next_fu_601_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_529) + unsigned(ap_const_lv13_1));
    indvars_iv_mid2_fu_659_p3 <= 
        indvars_iv_next_dup_fu_653_p2 when (exitcond_fu_607_p2(0) = '1') else 
        indvars_iv_reg_540;
    indvars_iv_next_dup_fu_653_p2 <= std_logic_vector(unsigned(ap_const_lv13_A9) + unsigned(indvars_iv_reg_540));
    lout_0_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_0_ce0 <= ap_const_logic_1;
        else 
            lout_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_10_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_10_ce0 <= ap_const_logic_1;
        else 
            lout_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_11_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_11_ce0 <= ap_const_logic_1;
        else 
            lout_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_12_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_12_ce0 <= ap_const_logic_1;
        else 
            lout_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_13_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_13_ce0 <= ap_const_logic_1;
        else 
            lout_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_14_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_14_ce0 <= ap_const_logic_1;
        else 
            lout_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_15_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_15_ce0 <= ap_const_logic_1;
        else 
            lout_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_16_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_16_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_16_ce0 <= ap_const_logic_1;
        else 
            lout_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_17_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_17_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_17_ce0 <= ap_const_logic_1;
        else 
            lout_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_18_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_18_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_18_ce0 <= ap_const_logic_1;
        else 
            lout_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_19_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_19_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_19_ce0 <= ap_const_logic_1;
        else 
            lout_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_1_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_1_ce0 <= ap_const_logic_1;
        else 
            lout_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_20_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_20_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_20_ce0 <= ap_const_logic_1;
        else 
            lout_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_21_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_21_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_21_ce0 <= ap_const_logic_1;
        else 
            lout_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_22_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_22_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_22_ce0 <= ap_const_logic_1;
        else 
            lout_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_23_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_23_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_23_ce0 <= ap_const_logic_1;
        else 
            lout_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_24_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_24_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_24_ce0 <= ap_const_logic_1;
        else 
            lout_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_25_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_25_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_25_ce0 <= ap_const_logic_1;
        else 
            lout_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_26_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_26_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_26_ce0 <= ap_const_logic_1;
        else 
            lout_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_27_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_27_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_27_ce0 <= ap_const_logic_1;
        else 
            lout_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_28_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_28_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_28_ce0 <= ap_const_logic_1;
        else 
            lout_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_29_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_29_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_29_ce0 <= ap_const_logic_1;
        else 
            lout_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_2_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_2_ce0 <= ap_const_logic_1;
        else 
            lout_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_30_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_30_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_30_ce0 <= ap_const_logic_1;
        else 
            lout_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_31_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_31_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_31_ce0 <= ap_const_logic_1;
        else 
            lout_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_3_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_3_ce0 <= ap_const_logic_1;
        else 
            lout_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_4_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_4_ce0 <= ap_const_logic_1;
        else 
            lout_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_5_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_5_ce0 <= ap_const_logic_1;
        else 
            lout_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_6_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_6_ce0 <= ap_const_logic_1;
        else 
            lout_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_7_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_7_ce0 <= ap_const_logic_1;
        else 
            lout_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_8_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_8_ce0 <= ap_const_logic_1;
        else 
            lout_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lout_9_address0 <= i_cast_fu_675_p1(8 - 1 downto 0);

    lout_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lout_9_ce0 <= ap_const_logic_1;
        else 
            lout_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_649_p1 <= w_t_mid2_v_fu_641_p3(5 - 1 downto 0);
    tmp_fu_717_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(z_1_mid2_fu_619_p3));
    w_s_fu_635_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_w_phi_fu_555_p4));
    w_t_mid2_v_fu_641_p3 <= 
        w_s_fu_635_p2 when (exitcond_fu_607_p2(0) = '1') else 
        ap_phi_mux_w_phi_fu_555_p4;
    z_1_mid2_fu_619_p3 <= 
        z_s_fu_613_p2 when (exitcond_fu_607_p2(0) = '1') else 
        z_1_reg_573;
    z_mid2_fu_667_p3 <= 
        z_s_fu_613_p2 when (exitcond_fu_607_p2(0) = '1') else 
        z_reg_562;
    z_s_fu_613_p2 <= std_logic_vector(unsigned(ap_const_lv13_A9) + unsigned(z_reg_562));
end behav;
