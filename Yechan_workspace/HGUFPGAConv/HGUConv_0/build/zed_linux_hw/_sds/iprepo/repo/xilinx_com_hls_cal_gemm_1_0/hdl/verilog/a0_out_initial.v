// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module a0_out_initial (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        lout_0_address0,
        lout_0_ce0,
        lout_0_we0,
        lout_0_d0,
        lout_1_address0,
        lout_1_ce0,
        lout_1_we0,
        lout_1_d0,
        lout_2_address0,
        lout_2_ce0,
        lout_2_we0,
        lout_2_d0,
        lout_3_address0,
        lout_3_ce0,
        lout_3_we0,
        lout_3_d0,
        lout_4_address0,
        lout_4_ce0,
        lout_4_we0,
        lout_4_d0,
        lout_5_address0,
        lout_5_ce0,
        lout_5_we0,
        lout_5_d0,
        lout_6_address0,
        lout_6_ce0,
        lout_6_we0,
        lout_6_d0,
        lout_7_address0,
        lout_7_ce0,
        lout_7_we0,
        lout_7_d0,
        lout_8_address0,
        lout_8_ce0,
        lout_8_we0,
        lout_8_d0,
        lout_9_address0,
        lout_9_ce0,
        lout_9_we0,
        lout_9_d0,
        lout_10_address0,
        lout_10_ce0,
        lout_10_we0,
        lout_10_d0,
        lout_11_address0,
        lout_11_ce0,
        lout_11_we0,
        lout_11_d0,
        lout_12_address0,
        lout_12_ce0,
        lout_12_we0,
        lout_12_d0,
        lout_13_address0,
        lout_13_ce0,
        lout_13_we0,
        lout_13_d0,
        lout_14_address0,
        lout_14_ce0,
        lout_14_we0,
        lout_14_d0,
        lout_15_address0,
        lout_15_ce0,
        lout_15_we0,
        lout_15_d0,
        lout_16_address0,
        lout_16_ce0,
        lout_16_we0,
        lout_16_d0,
        lout_17_address0,
        lout_17_ce0,
        lout_17_we0,
        lout_17_d0,
        lout_18_address0,
        lout_18_ce0,
        lout_18_we0,
        lout_18_d0,
        lout_19_address0,
        lout_19_ce0,
        lout_19_we0,
        lout_19_d0,
        lout_20_address0,
        lout_20_ce0,
        lout_20_we0,
        lout_20_d0,
        lout_21_address0,
        lout_21_ce0,
        lout_21_we0,
        lout_21_d0,
        lout_22_address0,
        lout_22_ce0,
        lout_22_we0,
        lout_22_d0,
        lout_23_address0,
        lout_23_ce0,
        lout_23_we0,
        lout_23_d0,
        lout_24_address0,
        lout_24_ce0,
        lout_24_we0,
        lout_24_d0,
        lout_25_address0,
        lout_25_ce0,
        lout_25_we0,
        lout_25_d0,
        lout_26_address0,
        lout_26_ce0,
        lout_26_we0,
        lout_26_d0,
        lout_27_address0,
        lout_27_ce0,
        lout_27_we0,
        lout_27_d0,
        lout_28_address0,
        lout_28_ce0,
        lout_28_we0,
        lout_28_d0,
        lout_29_address0,
        lout_29_ce0,
        lout_29_we0,
        lout_29_d0,
        lout_30_address0,
        lout_30_ce0,
        lout_30_we0,
        lout_30_d0,
        lout_31_address0,
        lout_31_ce0,
        lout_31_we0,
        lout_31_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] lout_0_address0;
output   lout_0_ce0;
output   lout_0_we0;
output  [31:0] lout_0_d0;
output  [7:0] lout_1_address0;
output   lout_1_ce0;
output   lout_1_we0;
output  [31:0] lout_1_d0;
output  [7:0] lout_2_address0;
output   lout_2_ce0;
output   lout_2_we0;
output  [31:0] lout_2_d0;
output  [7:0] lout_3_address0;
output   lout_3_ce0;
output   lout_3_we0;
output  [31:0] lout_3_d0;
output  [7:0] lout_4_address0;
output   lout_4_ce0;
output   lout_4_we0;
output  [31:0] lout_4_d0;
output  [7:0] lout_5_address0;
output   lout_5_ce0;
output   lout_5_we0;
output  [31:0] lout_5_d0;
output  [7:0] lout_6_address0;
output   lout_6_ce0;
output   lout_6_we0;
output  [31:0] lout_6_d0;
output  [7:0] lout_7_address0;
output   lout_7_ce0;
output   lout_7_we0;
output  [31:0] lout_7_d0;
output  [7:0] lout_8_address0;
output   lout_8_ce0;
output   lout_8_we0;
output  [31:0] lout_8_d0;
output  [7:0] lout_9_address0;
output   lout_9_ce0;
output   lout_9_we0;
output  [31:0] lout_9_d0;
output  [7:0] lout_10_address0;
output   lout_10_ce0;
output   lout_10_we0;
output  [31:0] lout_10_d0;
output  [7:0] lout_11_address0;
output   lout_11_ce0;
output   lout_11_we0;
output  [31:0] lout_11_d0;
output  [7:0] lout_12_address0;
output   lout_12_ce0;
output   lout_12_we0;
output  [31:0] lout_12_d0;
output  [7:0] lout_13_address0;
output   lout_13_ce0;
output   lout_13_we0;
output  [31:0] lout_13_d0;
output  [7:0] lout_14_address0;
output   lout_14_ce0;
output   lout_14_we0;
output  [31:0] lout_14_d0;
output  [7:0] lout_15_address0;
output   lout_15_ce0;
output   lout_15_we0;
output  [31:0] lout_15_d0;
output  [7:0] lout_16_address0;
output   lout_16_ce0;
output   lout_16_we0;
output  [31:0] lout_16_d0;
output  [7:0] lout_17_address0;
output   lout_17_ce0;
output   lout_17_we0;
output  [31:0] lout_17_d0;
output  [7:0] lout_18_address0;
output   lout_18_ce0;
output   lout_18_we0;
output  [31:0] lout_18_d0;
output  [7:0] lout_19_address0;
output   lout_19_ce0;
output   lout_19_we0;
output  [31:0] lout_19_d0;
output  [7:0] lout_20_address0;
output   lout_20_ce0;
output   lout_20_we0;
output  [31:0] lout_20_d0;
output  [7:0] lout_21_address0;
output   lout_21_ce0;
output   lout_21_we0;
output  [31:0] lout_21_d0;
output  [7:0] lout_22_address0;
output   lout_22_ce0;
output   lout_22_we0;
output  [31:0] lout_22_d0;
output  [7:0] lout_23_address0;
output   lout_23_ce0;
output   lout_23_we0;
output  [31:0] lout_23_d0;
output  [7:0] lout_24_address0;
output   lout_24_ce0;
output   lout_24_we0;
output  [31:0] lout_24_d0;
output  [7:0] lout_25_address0;
output   lout_25_ce0;
output   lout_25_we0;
output  [31:0] lout_25_d0;
output  [7:0] lout_26_address0;
output   lout_26_ce0;
output   lout_26_we0;
output  [31:0] lout_26_d0;
output  [7:0] lout_27_address0;
output   lout_27_ce0;
output   lout_27_we0;
output  [31:0] lout_27_d0;
output  [7:0] lout_28_address0;
output   lout_28_ce0;
output   lout_28_we0;
output  [31:0] lout_28_d0;
output  [7:0] lout_29_address0;
output   lout_29_ce0;
output   lout_29_we0;
output  [31:0] lout_29_d0;
output  [7:0] lout_30_address0;
output   lout_30_ce0;
output   lout_30_we0;
output  [31:0] lout_30_d0;
output  [7:0] lout_31_address0;
output   lout_31_ce0;
output   lout_31_we0;
output  [31:0] lout_31_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg lout_0_ce0;
reg lout_0_we0;
reg lout_1_ce0;
reg lout_1_we0;
reg lout_2_ce0;
reg lout_2_we0;
reg lout_3_ce0;
reg lout_3_we0;
reg lout_4_ce0;
reg lout_4_we0;
reg lout_5_ce0;
reg lout_5_we0;
reg lout_6_ce0;
reg lout_6_we0;
reg lout_7_ce0;
reg lout_7_we0;
reg lout_8_ce0;
reg lout_8_we0;
reg lout_9_ce0;
reg lout_9_we0;
reg lout_10_ce0;
reg lout_10_we0;
reg lout_11_ce0;
reg lout_11_we0;
reg lout_12_ce0;
reg lout_12_we0;
reg lout_13_ce0;
reg lout_13_we0;
reg lout_14_ce0;
reg lout_14_we0;
reg lout_15_ce0;
reg lout_15_we0;
reg lout_16_ce0;
reg lout_16_we0;
reg lout_17_ce0;
reg lout_17_we0;
reg lout_18_ce0;
reg lout_18_we0;
reg lout_19_ce0;
reg lout_19_we0;
reg lout_20_ce0;
reg lout_20_we0;
reg lout_21_ce0;
reg lout_21_we0;
reg lout_22_ce0;
reg lout_22_we0;
reg lout_23_ce0;
reg lout_23_we0;
reg lout_24_ce0;
reg lout_24_we0;
reg lout_25_ce0;
reg lout_25_we0;
reg lout_26_ce0;
reg lout_26_we0;
reg lout_27_ce0;
reg lout_27_we0;
reg lout_28_ce0;
reg lout_28_we0;
reg lout_29_ce0;
reg lout_29_we0;
reg lout_30_ce0;
reg lout_30_we0;
reg lout_31_ce0;
reg lout_31_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] j_2_fu_557_p2;
wire    ap_CS_fsm_state2;
reg   [7:0] j_reg_540;
reg    ap_block_state1;
wire   [0:0] exitcond1_fu_551_p2;
wire   [31:0] j_cast_fu_563_p1;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_540 <= j_2_fu_557_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_540 <= 8'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_0_ce0 = 1'b1;
    end else begin
        lout_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_0_we0 = 1'b1;
    end else begin
        lout_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_10_ce0 = 1'b1;
    end else begin
        lout_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_10_we0 = 1'b1;
    end else begin
        lout_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_11_ce0 = 1'b1;
    end else begin
        lout_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_11_we0 = 1'b1;
    end else begin
        lout_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_12_ce0 = 1'b1;
    end else begin
        lout_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_12_we0 = 1'b1;
    end else begin
        lout_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_13_ce0 = 1'b1;
    end else begin
        lout_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_13_we0 = 1'b1;
    end else begin
        lout_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_14_ce0 = 1'b1;
    end else begin
        lout_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_14_we0 = 1'b1;
    end else begin
        lout_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_15_ce0 = 1'b1;
    end else begin
        lout_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_15_we0 = 1'b1;
    end else begin
        lout_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_16_ce0 = 1'b1;
    end else begin
        lout_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_16_we0 = 1'b1;
    end else begin
        lout_16_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_17_ce0 = 1'b1;
    end else begin
        lout_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_17_we0 = 1'b1;
    end else begin
        lout_17_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_18_ce0 = 1'b1;
    end else begin
        lout_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_18_we0 = 1'b1;
    end else begin
        lout_18_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_19_ce0 = 1'b1;
    end else begin
        lout_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_19_we0 = 1'b1;
    end else begin
        lout_19_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_1_ce0 = 1'b1;
    end else begin
        lout_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_1_we0 = 1'b1;
    end else begin
        lout_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_20_ce0 = 1'b1;
    end else begin
        lout_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_20_we0 = 1'b1;
    end else begin
        lout_20_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_21_ce0 = 1'b1;
    end else begin
        lout_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_21_we0 = 1'b1;
    end else begin
        lout_21_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_22_ce0 = 1'b1;
    end else begin
        lout_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_22_we0 = 1'b1;
    end else begin
        lout_22_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_23_ce0 = 1'b1;
    end else begin
        lout_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_23_we0 = 1'b1;
    end else begin
        lout_23_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_24_ce0 = 1'b1;
    end else begin
        lout_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_24_we0 = 1'b1;
    end else begin
        lout_24_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_25_ce0 = 1'b1;
    end else begin
        lout_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_25_we0 = 1'b1;
    end else begin
        lout_25_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_26_ce0 = 1'b1;
    end else begin
        lout_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_26_we0 = 1'b1;
    end else begin
        lout_26_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_27_ce0 = 1'b1;
    end else begin
        lout_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_27_we0 = 1'b1;
    end else begin
        lout_27_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_28_ce0 = 1'b1;
    end else begin
        lout_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_28_we0 = 1'b1;
    end else begin
        lout_28_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_29_ce0 = 1'b1;
    end else begin
        lout_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_29_we0 = 1'b1;
    end else begin
        lout_29_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_2_ce0 = 1'b1;
    end else begin
        lout_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_2_we0 = 1'b1;
    end else begin
        lout_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_30_ce0 = 1'b1;
    end else begin
        lout_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_30_we0 = 1'b1;
    end else begin
        lout_30_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_31_ce0 = 1'b1;
    end else begin
        lout_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_31_we0 = 1'b1;
    end else begin
        lout_31_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_3_ce0 = 1'b1;
    end else begin
        lout_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_3_we0 = 1'b1;
    end else begin
        lout_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_4_ce0 = 1'b1;
    end else begin
        lout_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_4_we0 = 1'b1;
    end else begin
        lout_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_5_ce0 = 1'b1;
    end else begin
        lout_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_5_we0 = 1'b1;
    end else begin
        lout_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_6_ce0 = 1'b1;
    end else begin
        lout_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_6_we0 = 1'b1;
    end else begin
        lout_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_7_ce0 = 1'b1;
    end else begin
        lout_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_7_we0 = 1'b1;
    end else begin
        lout_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_8_ce0 = 1'b1;
    end else begin
        lout_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_8_we0 = 1'b1;
    end else begin
        lout_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lout_9_ce0 = 1'b1;
    end else begin
        lout_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lout_9_we0 = 1'b1;
    end else begin
        lout_9_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign exitcond1_fu_551_p2 = ((j_reg_540 == 8'd169) ? 1'b1 : 1'b0);

assign j_2_fu_557_p2 = (j_reg_540 + 8'd1);

assign j_cast_fu_563_p1 = j_reg_540;

assign lout_0_address0 = j_cast_fu_563_p1;

assign lout_0_d0 = 32'd0;

assign lout_10_address0 = j_cast_fu_563_p1;

assign lout_10_d0 = 32'd0;

assign lout_11_address0 = j_cast_fu_563_p1;

assign lout_11_d0 = 32'd0;

assign lout_12_address0 = j_cast_fu_563_p1;

assign lout_12_d0 = 32'd0;

assign lout_13_address0 = j_cast_fu_563_p1;

assign lout_13_d0 = 32'd0;

assign lout_14_address0 = j_cast_fu_563_p1;

assign lout_14_d0 = 32'd0;

assign lout_15_address0 = j_cast_fu_563_p1;

assign lout_15_d0 = 32'd0;

assign lout_16_address0 = j_cast_fu_563_p1;

assign lout_16_d0 = 32'd0;

assign lout_17_address0 = j_cast_fu_563_p1;

assign lout_17_d0 = 32'd0;

assign lout_18_address0 = j_cast_fu_563_p1;

assign lout_18_d0 = 32'd0;

assign lout_19_address0 = j_cast_fu_563_p1;

assign lout_19_d0 = 32'd0;

assign lout_1_address0 = j_cast_fu_563_p1;

assign lout_1_d0 = 32'd0;

assign lout_20_address0 = j_cast_fu_563_p1;

assign lout_20_d0 = 32'd0;

assign lout_21_address0 = j_cast_fu_563_p1;

assign lout_21_d0 = 32'd0;

assign lout_22_address0 = j_cast_fu_563_p1;

assign lout_22_d0 = 32'd0;

assign lout_23_address0 = j_cast_fu_563_p1;

assign lout_23_d0 = 32'd0;

assign lout_24_address0 = j_cast_fu_563_p1;

assign lout_24_d0 = 32'd0;

assign lout_25_address0 = j_cast_fu_563_p1;

assign lout_25_d0 = 32'd0;

assign lout_26_address0 = j_cast_fu_563_p1;

assign lout_26_d0 = 32'd0;

assign lout_27_address0 = j_cast_fu_563_p1;

assign lout_27_d0 = 32'd0;

assign lout_28_address0 = j_cast_fu_563_p1;

assign lout_28_d0 = 32'd0;

assign lout_29_address0 = j_cast_fu_563_p1;

assign lout_29_d0 = 32'd0;

assign lout_2_address0 = j_cast_fu_563_p1;

assign lout_2_d0 = 32'd0;

assign lout_30_address0 = j_cast_fu_563_p1;

assign lout_30_d0 = 32'd0;

assign lout_31_address0 = j_cast_fu_563_p1;

assign lout_31_d0 = 32'd0;

assign lout_3_address0 = j_cast_fu_563_p1;

assign lout_3_d0 = 32'd0;

assign lout_4_address0 = j_cast_fu_563_p1;

assign lout_4_d0 = 32'd0;

assign lout_5_address0 = j_cast_fu_563_p1;

assign lout_5_d0 = 32'd0;

assign lout_6_address0 = j_cast_fu_563_p1;

assign lout_6_d0 = 32'd0;

assign lout_7_address0 = j_cast_fu_563_p1;

assign lout_7_d0 = 32'd0;

assign lout_8_address0 = j_cast_fu_563_p1;

assign lout_8_d0 = 32'd0;

assign lout_9_address0 = j_cast_fu_563_p1;

assign lout_9_d0 = 32'd0;

endmodule //a0_out_initial
